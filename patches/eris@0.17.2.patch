diff --git a/index.d.ts b/index.d.ts
index 7905d3146ac162b6f4b366224cd798e418a40d6f..b67733371a4816a3128820581307bf5282209dd0 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -24,7 +24,7 @@ declare namespace Eris {
   type MessageApplicationCommandStructure = Omit<MessageApplicationCommand, "id" | "application_id" | "guild_id">;
   type UserApplicationCommand = Omit<ApplicationCommand<Constants["ApplicationCommandTypes"]["USER"]>, "description" | "options">;
   type UserApplicationCommandStructure = Omit<UserApplicationCommand, "id" | "application_id" | "guild_id">;
-  type ApplicationCommandOptions = ApplicationCommandOptionsSubCommand | ApplicationCommandOptionsSubCommandGroup | ApplicationCommandOptionsWithValue;
+  type ApplicationCommandOptions = (ApplicationCommandOptionsSubCommand | ApplicationCommandOptionsSubCommandGroup | ApplicationCommandOptionsWithValue) & { name_localizations?: ApplicationLocales; description_localizations?: ApplicationLocales; };
   type ApplicationCommandOptionsBoolean = ApplicationCommandOption<Constants["ApplicationCommandOptionTypes"]["BOOLEAN"]>;
   type ApplicationCommandOptionsChannel = ApplicationCommandOption<Constants["ApplicationCommandOptionTypes"]["CHANNEL"]>;
   type ApplicationCommandOptionsInteger = ApplicationCommandOptionsIntegerWithAutocomplete | ApplicationCommandOptionsIntegerWithoutAutocomplete | ApplicationCommandOptionsIntegerWithMinMax;
@@ -180,13 +180,26 @@ declare namespace Eris {
   }
 
   // Application Commands
+  type ApplicationLocales = Partial<
+    Record<
+      'id' | 'da' | 'de' | 'en-GB' | 'en-US' | 'en-ES' | 'fr' | 'hr' |
+      'it' | 'lt' | 'hu' | 'nl' | 'no' | 'pl' | 'pt-BR' | 'ro' | 'fi' |
+      'sv-SE' | 'vi' | 'tr' | 'cs' | 'el' | 'bg'| 'ru' | 'uk' | 'hi' |
+      'th' | 'zh-CN' | 'ja' | 'zh-TW' | 'ko',
+      string
+    >
+  >
   interface ApplicationCommand<T extends ApplicationCommandTypes = ApplicationCommandTypes> {
     application_id: string;
-    defaultPermission?: boolean;
     description: T extends Constants["ApplicationCommandTypes"]["CHAT_INPUT"] ? string : never;
+    description_localizations?: T extends Constants["ApplicationCommandTypes"]["CHAT_INPUT"] ? ApplicationLocales : never;
     guild_id?: string;
     id: string;
     name: string;
+    name_localizations?: ApplicationLocales;
+    default_member_permissions?: boolean;
+    dm_permission?: boolean;
+    nsfw?: boolean;
     options?: ApplicationCommandOptions[];
     type: T;
   }
@@ -233,7 +246,9 @@ declare namespace Eris {
   interface ApplicationCommandOption<T extends Constants["ApplicationCommandOptionTypes"][Exclude<keyof Constants["ApplicationCommandOptionTypes"], "SUB_COMMAND" | "SUB_COMMAND_GROUP">]> {
     channel_types: T extends Constants["ApplicationCommandOptionTypes"]["CHANNEL"] ? ChannelTypes | undefined : never;
     description: string;
+    description_localizations?: ApplicationLocales;
     name: string;
+    name_localizations?: ApplicationLocales;
     required?: boolean;
     type: T;
   }
diff --git a/lib/Client.js b/lib/Client.js
index 9504da95aa65f7afc31e7e8464d6c90dab384b85..c21568200543df21dcab79ac69db1d4c11d72819 100644
--- a/lib/Client.js
+++ b/lib/Client.js
@@ -593,7 +593,7 @@ class Client extends EventEmitter {
     * @arg {String} [command.description] The command description (Slash Commands Only)
     * @arg {Array<Object>} [command.options] An array of [command options](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure)
     * @arg {Number} [type=1] The type of application command, 1 for slash command, 2 for user, and 3 for message
-    * @arg {Boolean} [command.defaultPermission=true] Whether the command is enabled by default when the app is added to a guild
+    * @arg {Boolean} [command.default_member_permissions=true] Whether the command is enabled by default when the app is added to a guild
     * @returns {Promise<Object>} Resolves with a commands object
     */
     createCommand(command) {
@@ -605,7 +605,9 @@ class Client extends EventEmitter {
                 }
             }
         }
-        command.default_permission = command.defaultPermission;
+        if(command.default_member_permissions === undefined){
+            command.default_member_permissions = true;
+        }
         return this.requestHandler.request("POST", Endpoints.COMMANDS(this.application.id), true, command);
     }
 